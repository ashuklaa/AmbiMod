@using System.IO;
@using System.Linq;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using System.IO.Ports
@inject ISerialCommsManager SerialCommsManager
@inject IJSRuntime JSRuntime
@page "/KeyTest"

<h3>KeyTester</h3>

<section class="layoutcontainer">
    <!--image of mouse-->
    <h2>@testStatus</h2>
    <button @onclick=ToggleTest>Toggle Test Mode</button>
    <p>@runningLog</p>
</section>


@code {

    private const string TestMode = "Testing";
    private const string TestACK = "123";
    public string testStatus = "Awaiting test mode...";
    public string runningLog = "";
    private int testCtr = 0;

    public async void ToggleTest()
    {
        SerialPort mousePort = SerialCommsManager.MouseInstance.PortName;
        runningLog = "";
        SerialCommsManager.OnDataReceived += LogHandler;
        await Task.Run(() => SerialCommsManager.SendData(TestMode));
    }

    public async void LogHandler()
    {
        if (SerialCommsManager.response.Trim() == TestACK && testCtr == 0)
        {
            testCtr = 1;
            testStatus = "Test mode confirmed, ready to test inputs";
            SerialCommsManager.MouseInstance.PortName.DataReceived += KeyTestLogger;
            await InvokeAsync(StateHasChanged);
        }
        else if (SerialCommsManager.response.Trim() == TestACK && testCtr == 1)
        {
            testCtr = 0;
            testStatus = "Test Mode Disabled";
            SerialCommsManager.MouseInstance.PortName.DataReceived -= KeyTestLogger;
            await InvokeAsync(StateHasChanged);
        }

    }
    public async void KeyTestLogger(object sender, SerialDataReceivedEventArgs e)
    {
        await Task.Delay(250);
        runningLog += SerialCommsManager.response;
        await InvokeAsync(StateHasChanged);
    }
    public static string GetBase64ImageString(string imagePath)
    {
        // Read the file into a byte array
        byte[] imageBytes;
        using (FileStream fileStream = new FileStream(imagePath, FileMode.Open, FileAccess.Read))
        {
            using (BinaryReader binaryReader = new BinaryReader(fileStream))
            {
                imageBytes = binaryReader.ReadBytes((int)fileStream.Length);
            }
        }

        // Convert byte array to Base64 string
        return Convert.ToBase64String(imageBytes);
    }
    static readonly string userImgLoc1 = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) + "\\source\\repos\\AmbiMod\\Modulify\\wwwroot\\mouseasset.png";
    static readonly string userImgLoc2 = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) + "\\source\\repos\\AmbiMod\\Modulify\\wwwroot\\mouseasset2.png";

    string b64Mouse1 = GetBase64ImageString(userImgLoc1);
    string b64Mouse2 = GetBase64ImageString(userImgLoc2);
}
