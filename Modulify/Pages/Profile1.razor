@using System.IO;
@inject ISerialCommsManager SerialCommsManager
@inject IJSRuntime JSRuntime
@page "/Profile1"

<h3>Profiles</h3>

<h3>Key Configuration - Profile 1</h3>

<select @onchange="LoadProfile">
    @foreach (var profile in profileNames)
    {
        <option value="@profile">@profile</option>
    }
</select>

<main class="layoutcontainer">
    <section class="top-config">
        <section class="m1-sL-m4-m5">   <!--section for Left Mouse Buttons (M1,M3, ScWheel Left)-->
            <p>Left Mouse Button&nbsp;<input type="text" placeholder="M1" value="@keybinds["M1"]"></p>
            <p>Scroll Wheel Left&nbsp;<input type="text" placeholder="SWL" /></p>
            <div class="midalign"><p>Left Side Panel</p><span></span></div>
            <p>Side Mouse Button 1&nbsp;<input type="text" placeholder="M4" value="@keybinds["M4"]"/></p>
            <p>Side Mouse Button 2&nbsp;<input type="text" placeholder="M5" value="@keybinds["M5"]" /></p>
        </section>
        <section class="mPic-dbnce">    <!--image of mouse, debounce delay textbox-->
            <img height="75%" src="data:image/jpeg;base64,@b64Mouse" />
            <p>Debounce Delay&nbsp;<input type="text" placeholder="50ms" /></p>
        </section>
        <section class="m2-sR-m3">      <!--section for Right Mouse Buttons (M2, M3, ScWheel Right)-->
            <p>Right Mouse Button&nbsp;<input type="text" placeholder="M2" value="@keybinds["M2"]" /></p>
            <p>Scroll Wheel Right&nbsp;<input type="text" placeholder="SWR" /></p>
            <p>&nbsp;</p>
            <p>&nbsp;</p>
            <p>&nbsp;</p>
        </section>
    </section>
    <section class="bot-config">
        <aside class="mod-detect">      <!--module detection-->
            <button @onclick="SaveProfileAsync">Save Profile</button>
            <button @onclick="SaveProfileAsync">Send to Mouse</button>
        </aside>
        <section class="dpi-scale">     <!--DPI Slider-->
            <aside>DPI: @DPI &nbsp;</aside>
            <p>
                <input type="range" min="0" max="8000" step="1" @bind="DPI" @bind:event="oninput" />
            </p>
            <div class="slider-labels">
                <span>0</span>
                <span>400</span>
                <span>800</span>
                <span>1600</span>
                <span>5000</span>
                <span>8000</span>
            </div>
        </section>
    </section>
    
</main>

@code {

    private string ProfileName = "";
    private int DPI = 0;
    private string[] DPI_SET = { "0" };
    private int msDebounce = 0;
    private Dictionary<string, string> keybinds;


    private List<string> keys = new List<string> { "LEFT_CLICK", "RIGHT_CLICK", "MIDDLE_CLICK", "MOUSE_4", "MOUSE_5", "MOUSE_6", "MOUSE_7", "MOUSE_8", "MOUSE_9", "MOUSE_10", "MOUSE_11", "MOUSE_12" };

    private string selectedProfile;
    private List<string> profileNames = new();



    private string selectedProfileName;
    Profiles curProfile;
    Profiles selProfile;
    protected override void OnInitialized()
    {
        keybinds = keys.ToDictionary(key => key, key => (string)null);
        var appDataPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "Modulify", "Data\\Profiles");

        if (Directory.Exists(appDataPath))
        {
            var files = Directory.GetFiles(appDataPath, "*.json");

            profileNames = files.Select(Path.GetFileNameWithoutExtension).ToList();
        }

        // SerialCommsManager.OnMouseConnected += GetProfile;
        // try
        // {
        //     GetProfile();
        // }
        // catch(Exception ex)
        // {
        //     Console.WriteLine($"{ex.Message}");
        //}
    }
    private async Task SaveProfileAsync()
    {
        // Ask for profile name
        var profileName = await JSRuntime.InvokeAsync<string>("prompt", "Please enter the profile name", "defaultprofile");

        if (string.IsNullOrEmpty(profileName))
        {
            return;
        }

        // Check if a profile with this name already exists
        var profilePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "Modulify", "Data\\Profiles", $"{profileName}.json");

        if (File.Exists(profilePath))
        {
            // Ask for confirmation to overwrite
            bool overwrite = await JSRuntime.InvokeAsync<bool>("confirm", "A profile with this name already exists. Do you want to overwrite it?");
            if (!overwrite)
            {
                return;
            }
        }

        SaveToJSON(profileName, DPI, DPI_SET, msDebounce, keybinds); // Pass the profileName to save method.
    }

    private void SaveToJSON(string profileName, int DPI, string[] DPI_SET, int debounce, Dictionary<string, string> keybinds)
    {
        Profiles tempProfile = new Profiles(profileName, Convert.ToString(DPI), DPI_SET, Convert.ToString(msDebounce), keybinds);
        tempProfile.SaveToJSON();
    }

    private void LoadProfile(ChangeEventArgs e)
    {
        selectedProfileName = e.Value.ToString();
        var filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "YourAppName", "Data\\Profiles", $"{selectedProfileName}.json");
        if (File.Exists(filePath))
        {
            selProfile = new Profiles(selectedProfileName);
            ProfileName = selProfile.ProfileName;
            DPI = Convert.ToInt32(selProfile.DPI);
            keybinds = selProfile.Keybinds;
            InvokeAsync(StateHasChanged); // Update the UI with the new profile
        }
    }

    private void GetProfile()
    {
        curProfile = SerialCommsManager.MouseInstance.CurrentProfile;

        ProfileName = curProfile.ProfileName;
        DPI = Convert.ToInt32(curProfile.DPI);
        DPI_SET = curProfile.DPI_SET;
        msDebounce = Convert.ToInt32(curProfile.DEBOUNCE);
        keybinds = curProfile.Keybinds;



    }
    public void Dispose()
    {
        SerialCommsManager.OnMouseDetected -= GetProfile;
    }
    public static string GetBase64ImageString(string imagePath)
    {
        // Read the file into a byte array
        byte[] imageBytes;
        using (FileStream fileStream = new FileStream(imagePath, FileMode.Open, FileAccess.Read))
        {
            using (BinaryReader binaryReader = new BinaryReader(fileStream))
            {
                imageBytes = binaryReader.ReadBytes((int)fileStream.Length);
            }
        }

        // Convert byte array to Base64 string
        return Convert.ToBase64String(imageBytes);
    }
    static readonly string userImgLoc = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) + "\\source\\repos\\AmbiMod\\Modulify\\wwwroot\\mouseasset.png";


    string b64Mouse =  GetBase64ImageString(userImgLoc);
}
