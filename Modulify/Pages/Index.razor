@page "/"
@inject ISerialCommsManager SerialCommsManager
@using System.IO.Ports
@using System.Text
@using System.Collections.Generic

<main class="layoutContainer">
    <button @onclick="TestSerialConnection">Test Serial Connection</button>
    <p>@message</p>

    <button @onclick="EchoConfig">Send Profile to Serial</button>
    <p class="@origMsg" >Original Sent Message: @sentProfile</p>
    <p>@status</p>


</main>



@code {
    private string message = "Awaiting mouse connection";
    private string sentProfile = "";
    private string status = "Awaiting sample profile send...";
    private string origMsg = "origMsgInvis";

    private async void EchoConfig()
    {
        if (SerialCommsManager.MouseFound())
        {
            SerialCommsManager.OnDataReceived += UpdateProfile;
            await SerialCommsManager.ConnectMouse(SerialCommsManager.MouseInstance.PortName);

            //string loremIpsum = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pharetra vel turpis nunc eget lorem dolor.";

            string stringProfile = SerialCommsManager.MouseInstance.CurrentProfile.StringifyProfile();
            sentProfile = stringProfile;
            origMsg = "origMsgVisible";
            await SerialCommsManager.SendData(stringProfile);
        }
        return;

    }
    private async void UpdateProfile()
    {
        if (SerialCommsManager.response.Trim().StartsWith("Profile"))
        {
            status = SerialCommsManager.response;
        }
        
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        SerialCommsManager.OnMouseDetected += UpdateMessage;
        message = "Detecting mouse...";
        await SerialCommsManager.DetectMouse();
        Console.WriteLine($"Test");
    }

    private void UpdateMessage()
    {
        MouseInstance connectedMouse = SerialCommsManager.MouseInstance;
        message = $"Arduino autodetected on port {connectedMouse?.PortName?.PortName}";
        InvokeAsync(StateHasChanged);
    }
    public void Dispose()
    {
        //remove listener
        SerialCommsManager.OnMouseDetected -= UpdateMessage;
    }
    public async void TestSerialConnection()
    {
        message = "Manual Device Search Initiated";
        await InvokeAsync(StateHasChanged);
        await SerialCommsManager.DetectMouse().ConfigureAwait(true);
        MouseInstance connectedMouse = SerialCommsManager.MouseInstance;

        if (SerialCommsManager.MouseFound())
        {
            message = $"Arduino connected on port {connectedMouse.PortName.PortName}";
            await InvokeAsync(StateHasChanged);
        }

    }
        /*private SerialPort _serialPort;
    private string message = "Click the button to test the serial connection.";

    protected override void OnInitialized()
    {
        _serialPort = new SerialPort("COM7", 9600, Parity.None, 8, StopBits.One)
            {
                DtrEnable = true, // Data Terminal Ready
                RtsEnable = true, // Request to Send
                ReadTimeout = 5000,
                WriteTimeout = 500
            };

        // Additional initialization code can go here
    }

    private async Task TestSerialConnection()
    {
        try
        {
            if (!_serialPort.IsOpen)
                _serialPort.Open();

            _serialPort.DiscardInBuffer(); // Clear the buffer before writing
            _serialPort.WriteLine("Hello\n"); // Send a command to the Arduino

            // Offload the read operation to a background thread to avoid UI freeze
            var response = await Task.Run(() => ReadResponse());
            message = $"Response: {response}";
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }

    private string ReadResponse()
    {
        var buffer = new List<byte>();
        try
        {
            do
            {
                var byteRead = _serialPort.ReadByte(); // This call is blocking
                buffer.Add((byte)byteRead);
            } while (_serialPort.BytesToRead > 0); // Continue reading if there's more data

            // Assuming ASCII encoding for simplicity; adjust as necessary
            return Encoding.ASCII.GetString(buffer.ToArray());
        }
        catch (TimeoutException)
        {
            return "Timeout: No response was received.";
        }
    }

    public void Dispose()
    {
        if (_serialPort != null)
        {
            if (_serialPort.IsOpen)
                _serialPort.Close();
            _serialPort.Dispose();
        }
    }
    */
}